# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from protos import agent_service_pb2 as protos_dot_agent__service__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protos/agent_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentServiceStub(object):
    """===============================
    AgentService: Bidirectional Streaming
    ===============================
    This service defines a single bidirectional streaming RPC, Communicate.

    - The agent always acts as the gRPC client and initiates the connection to the orchestrator (server).
    - Both agent and orchestrator can send messages at any time over the stream.
    - This design avoids firewall issues, as only the agent makes outbound connections.
    - All communication (heartbeats, job assignments, results, logs, errors, etc.) is multiplexed over this single stream.

    Benefits of a single streaming RPC:
    * Simpler connection management (one persistent stream per agent)
    * Real-time, low-latency, bidirectional communication
    * Easy to extend with new message types (just add to the envelope messages)
    * No need for the agent to run a server or open ports
    * Supports both push and pull patterns

    Cons of a single streaming RPC:
    * Harder to debug and monitor individual message types (all are multiplexed on one stream)
    * If the stream breaks, all communication is interrupted (no isolation between message types)
    * More complex client/server logic to handle message routing and state
    * Not as straightforward to implement request/response patterns as with unary RPCs
    * Backpressure or slow consumers can affect all message types on the stream
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Communicate = channel.stream_stream(
                '/agent.AgentService/Communicate',
                request_serializer=protos_dot_agent__service__pb2.AgentMessage.SerializeToString,
                response_deserializer=protos_dot_agent__service__pb2.OrchestratorMessage.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """===============================
    AgentService: Bidirectional Streaming
    ===============================
    This service defines a single bidirectional streaming RPC, Communicate.

    - The agent always acts as the gRPC client and initiates the connection to the orchestrator (server).
    - Both agent and orchestrator can send messages at any time over the stream.
    - This design avoids firewall issues, as only the agent makes outbound connections.
    - All communication (heartbeats, job assignments, results, logs, errors, etc.) is multiplexed over this single stream.

    Benefits of a single streaming RPC:
    * Simpler connection management (one persistent stream per agent)
    * Real-time, low-latency, bidirectional communication
    * Easy to extend with new message types (just add to the envelope messages)
    * No need for the agent to run a server or open ports
    * Supports both push and pull patterns

    Cons of a single streaming RPC:
    * Harder to debug and monitor individual message types (all are multiplexed on one stream)
    * If the stream breaks, all communication is interrupted (no isolation between message types)
    * More complex client/server logic to handle message routing and state
    * Not as straightforward to implement request/response patterns as with unary RPCs
    * Backpressure or slow consumers can affect all message types on the stream
    """

    def Communicate(self, request_iterator, context):
        """Bidirectional streaming RPC for all agent-orchestrator communication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Communicate': grpc.stream_stream_rpc_method_handler(
                    servicer.Communicate,
                    request_deserializer=protos_dot_agent__service__pb2.AgentMessage.FromString,
                    response_serializer=protos_dot_agent__service__pb2.OrchestratorMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agent.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agent.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """===============================
    AgentService: Bidirectional Streaming
    ===============================
    This service defines a single bidirectional streaming RPC, Communicate.

    - The agent always acts as the gRPC client and initiates the connection to the orchestrator (server).
    - Both agent and orchestrator can send messages at any time over the stream.
    - This design avoids firewall issues, as only the agent makes outbound connections.
    - All communication (heartbeats, job assignments, results, logs, errors, etc.) is multiplexed over this single stream.

    Benefits of a single streaming RPC:
    * Simpler connection management (one persistent stream per agent)
    * Real-time, low-latency, bidirectional communication
    * Easy to extend with new message types (just add to the envelope messages)
    * No need for the agent to run a server or open ports
    * Supports both push and pull patterns

    Cons of a single streaming RPC:
    * Harder to debug and monitor individual message types (all are multiplexed on one stream)
    * If the stream breaks, all communication is interrupted (no isolation between message types)
    * More complex client/server logic to handle message routing and state
    * Not as straightforward to implement request/response patterns as with unary RPCs
    * Backpressure or slow consumers can affect all message types on the stream
    """

    @staticmethod
    def Communicate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/agent.AgentService/Communicate',
            protos_dot_agent__service__pb2.AgentMessage.SerializeToString,
            protos_dot_agent__service__pb2.OrchestratorMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
